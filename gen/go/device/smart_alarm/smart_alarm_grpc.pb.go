// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: device/smart_alarm/smart_alarm.proto

package alarm1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SmartAlarmService_AddSmartAlarm_FullMethodName       = "/SmartAlarmService/AddSmartAlarm"
	SmartAlarmService_OpenAndCloseCurtain_FullMethodName = "/SmartAlarmService/OpenAndCloseCurtain"
	SmartAlarmService_CreateAlarmClock_FullMethodName    = "/SmartAlarmService/CreateAlarmClock"
	SmartAlarmService_OpenAndClose_FullMethodName        = "/SmartAlarmService/OpenAndClose"
	SmartAlarmService_RemainingTime_FullMethodName       = "/SmartAlarmService/RemainingTime"
)

// SmartAlarmServiceClient is the client API for SmartAlarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmartAlarmServiceClient interface {
	AddSmartAlarm(ctx context.Context, in *AddSmartAlarmReq, opts ...grpc.CallOption) (*AlarmStatusMessage, error)
	OpenAndCloseCurtain(ctx context.Context, in *OpenAndCloseCurtainReq, opts ...grpc.CallOption) (*OpenAndCloseCurtainRes, error)
	CreateAlarmClock(ctx context.Context, in *CreateAlarmClockReq, opts ...grpc.CallOption) (*AlarmStatusMessage, error)
	OpenAndClose(ctx context.Context, in *OpenAndCloseReq, opts ...grpc.CallOption) (*OpenAndCloseRes, error)
	RemainingTime(ctx context.Context, in *RemainingTimeReq, opts ...grpc.CallOption) (*RemainingTimRes, error)
}

type smartAlarmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartAlarmServiceClient(cc grpc.ClientConnInterface) SmartAlarmServiceClient {
	return &smartAlarmServiceClient{cc}
}

func (c *smartAlarmServiceClient) AddSmartAlarm(ctx context.Context, in *AddSmartAlarmReq, opts ...grpc.CallOption) (*AlarmStatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlarmStatusMessage)
	err := c.cc.Invoke(ctx, SmartAlarmService_AddSmartAlarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartAlarmServiceClient) OpenAndCloseCurtain(ctx context.Context, in *OpenAndCloseCurtainReq, opts ...grpc.CallOption) (*OpenAndCloseCurtainRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenAndCloseCurtainRes)
	err := c.cc.Invoke(ctx, SmartAlarmService_OpenAndCloseCurtain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartAlarmServiceClient) CreateAlarmClock(ctx context.Context, in *CreateAlarmClockReq, opts ...grpc.CallOption) (*AlarmStatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlarmStatusMessage)
	err := c.cc.Invoke(ctx, SmartAlarmService_CreateAlarmClock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartAlarmServiceClient) OpenAndClose(ctx context.Context, in *OpenAndCloseReq, opts ...grpc.CallOption) (*OpenAndCloseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenAndCloseRes)
	err := c.cc.Invoke(ctx, SmartAlarmService_OpenAndClose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartAlarmServiceClient) RemainingTime(ctx context.Context, in *RemainingTimeReq, opts ...grpc.CallOption) (*RemainingTimRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemainingTimRes)
	err := c.cc.Invoke(ctx, SmartAlarmService_RemainingTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartAlarmServiceServer is the server API for SmartAlarmService service.
// All implementations must embed UnimplementedSmartAlarmServiceServer
// for forward compatibility
type SmartAlarmServiceServer interface {
	AddSmartAlarm(context.Context, *AddSmartAlarmReq) (*AlarmStatusMessage, error)
	OpenAndCloseCurtain(context.Context, *OpenAndCloseCurtainReq) (*OpenAndCloseCurtainRes, error)
	CreateAlarmClock(context.Context, *CreateAlarmClockReq) (*AlarmStatusMessage, error)
	OpenAndClose(context.Context, *OpenAndCloseReq) (*OpenAndCloseRes, error)
	RemainingTime(context.Context, *RemainingTimeReq) (*RemainingTimRes, error)
	mustEmbedUnimplementedSmartAlarmServiceServer()
}

// UnimplementedSmartAlarmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSmartAlarmServiceServer struct {
}

func (UnimplementedSmartAlarmServiceServer) AddSmartAlarm(context.Context, *AddSmartAlarmReq) (*AlarmStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSmartAlarm not implemented")
}
func (UnimplementedSmartAlarmServiceServer) OpenAndCloseCurtain(context.Context, *OpenAndCloseCurtainReq) (*OpenAndCloseCurtainRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAndCloseCurtain not implemented")
}
func (UnimplementedSmartAlarmServiceServer) CreateAlarmClock(context.Context, *CreateAlarmClockReq) (*AlarmStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlarmClock not implemented")
}
func (UnimplementedSmartAlarmServiceServer) OpenAndClose(context.Context, *OpenAndCloseReq) (*OpenAndCloseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAndClose not implemented")
}
func (UnimplementedSmartAlarmServiceServer) RemainingTime(context.Context, *RemainingTimeReq) (*RemainingTimRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemainingTime not implemented")
}
func (UnimplementedSmartAlarmServiceServer) mustEmbedUnimplementedSmartAlarmServiceServer() {}

// UnsafeSmartAlarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartAlarmServiceServer will
// result in compilation errors.
type UnsafeSmartAlarmServiceServer interface {
	mustEmbedUnimplementedSmartAlarmServiceServer()
}

func RegisterSmartAlarmServiceServer(s grpc.ServiceRegistrar, srv SmartAlarmServiceServer) {
	s.RegisterService(&SmartAlarmService_ServiceDesc, srv)
}

func _SmartAlarmService_AddSmartAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSmartAlarmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartAlarmServiceServer).AddSmartAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartAlarmService_AddSmartAlarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartAlarmServiceServer).AddSmartAlarm(ctx, req.(*AddSmartAlarmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartAlarmService_OpenAndCloseCurtain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAndCloseCurtainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartAlarmServiceServer).OpenAndCloseCurtain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartAlarmService_OpenAndCloseCurtain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartAlarmServiceServer).OpenAndCloseCurtain(ctx, req.(*OpenAndCloseCurtainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartAlarmService_CreateAlarmClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlarmClockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartAlarmServiceServer).CreateAlarmClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartAlarmService_CreateAlarmClock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartAlarmServiceServer).CreateAlarmClock(ctx, req.(*CreateAlarmClockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartAlarmService_OpenAndClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAndCloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartAlarmServiceServer).OpenAndClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartAlarmService_OpenAndClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartAlarmServiceServer).OpenAndClose(ctx, req.(*OpenAndCloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartAlarmService_RemainingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemainingTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartAlarmServiceServer).RemainingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartAlarmService_RemainingTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartAlarmServiceServer).RemainingTime(ctx, req.(*RemainingTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SmartAlarmService_ServiceDesc is the grpc.ServiceDesc for SmartAlarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmartAlarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SmartAlarmService",
	HandlerType: (*SmartAlarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSmartAlarm",
			Handler:    _SmartAlarmService_AddSmartAlarm_Handler,
		},
		{
			MethodName: "OpenAndCloseCurtain",
			Handler:    _SmartAlarmService_OpenAndCloseCurtain_Handler,
		},
		{
			MethodName: "CreateAlarmClock",
			Handler:    _SmartAlarmService_CreateAlarmClock_Handler,
		},
		{
			MethodName: "OpenAndClose",
			Handler:    _SmartAlarmService_OpenAndClose_Handler,
		},
		{
			MethodName: "RemainingTime",
			Handler:    _SmartAlarmService_RemainingTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/smart_alarm/smart_alarm.proto",
}
