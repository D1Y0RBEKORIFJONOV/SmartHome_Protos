// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: device/speaker/speaker.proto

package speaker1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SpeakerService_AddSpeaker_FullMethodName          = "/SpeakerService/AddSpeaker"
	SpeakerService_AddChannel_FullMethodName          = "/SpeakerService/AddChannel"
	SpeakerService_GetUserChannel_FullMethodName      = "/SpeakerService/GetUserChannel"
	SpeakerService_DeleteChannel_FullMethodName       = "/SpeakerService/DeleteChannel"
	SpeakerService_DownOrUpVolume_FullMethodName      = "/SpeakerService/DownOrUpVolume"
	SpeakerService_PreviousAndNext_FullMethodName     = "/SpeakerService/PreviousAndNext"
	SpeakerService_OnAndOffUserSpeaker_FullMethodName = "/SpeakerService/OnAndOffUserSpeaker"
)

// SpeakerServiceClient is the client API for SpeakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeakerServiceClient interface {
	AddSpeaker(ctx context.Context, in *AddSpeakerReq, opts ...grpc.CallOption) (*SpeakerStatusMessage, error)
	AddChannel(ctx context.Context, in *AddChannelReqS, opts ...grpc.CallOption) (*SpeakerStatusMessage, error)
	GetUserChannel(ctx context.Context, in *GetUserChannelReqS, opts ...grpc.CallOption) (*GetUserChannelResS, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelReqS, opts ...grpc.CallOption) (*SpeakerStatusMessage, error)
	DownOrUpVolume(ctx context.Context, in *DownOrUpVolumeReqS, opts ...grpc.CallOption) (*DownOrUpVolumeResS, error)
	PreviousAndNext(ctx context.Context, in *PreviousAndNextReqS, opts ...grpc.CallOption) (*PreviousAndNextResS, error)
	OnAndOffUserSpeaker(ctx context.Context, in *OnAndOffUserSpeakerReq, opts ...grpc.CallOption) (*OnAndOffUserSpeakerRes, error)
}

type speakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerServiceClient(cc grpc.ClientConnInterface) SpeakerServiceClient {
	return &speakerServiceClient{cc}
}

func (c *speakerServiceClient) AddSpeaker(ctx context.Context, in *AddSpeakerReq, opts ...grpc.CallOption) (*SpeakerStatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpeakerStatusMessage)
	err := c.cc.Invoke(ctx, SpeakerService_AddSpeaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) AddChannel(ctx context.Context, in *AddChannelReqS, opts ...grpc.CallOption) (*SpeakerStatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpeakerStatusMessage)
	err := c.cc.Invoke(ctx, SpeakerService_AddChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) GetUserChannel(ctx context.Context, in *GetUserChannelReqS, opts ...grpc.CallOption) (*GetUserChannelResS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserChannelResS)
	err := c.cc.Invoke(ctx, SpeakerService_GetUserChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) DeleteChannel(ctx context.Context, in *DeleteChannelReqS, opts ...grpc.CallOption) (*SpeakerStatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpeakerStatusMessage)
	err := c.cc.Invoke(ctx, SpeakerService_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) DownOrUpVolume(ctx context.Context, in *DownOrUpVolumeReqS, opts ...grpc.CallOption) (*DownOrUpVolumeResS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownOrUpVolumeResS)
	err := c.cc.Invoke(ctx, SpeakerService_DownOrUpVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) PreviousAndNext(ctx context.Context, in *PreviousAndNextReqS, opts ...grpc.CallOption) (*PreviousAndNextResS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreviousAndNextResS)
	err := c.cc.Invoke(ctx, SpeakerService_PreviousAndNext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) OnAndOffUserSpeaker(ctx context.Context, in *OnAndOffUserSpeakerReq, opts ...grpc.CallOption) (*OnAndOffUserSpeakerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnAndOffUserSpeakerRes)
	err := c.cc.Invoke(ctx, SpeakerService_OnAndOffUserSpeaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeakerServiceServer is the server API for SpeakerService service.
// All implementations must embed UnimplementedSpeakerServiceServer
// for forward compatibility
type SpeakerServiceServer interface {
	AddSpeaker(context.Context, *AddSpeakerReq) (*SpeakerStatusMessage, error)
	AddChannel(context.Context, *AddChannelReqS) (*SpeakerStatusMessage, error)
	GetUserChannel(context.Context, *GetUserChannelReqS) (*GetUserChannelResS, error)
	DeleteChannel(context.Context, *DeleteChannelReqS) (*SpeakerStatusMessage, error)
	DownOrUpVolume(context.Context, *DownOrUpVolumeReqS) (*DownOrUpVolumeResS, error)
	PreviousAndNext(context.Context, *PreviousAndNextReqS) (*PreviousAndNextResS, error)
	OnAndOffUserSpeaker(context.Context, *OnAndOffUserSpeakerReq) (*OnAndOffUserSpeakerRes, error)
	mustEmbedUnimplementedSpeakerServiceServer()
}

// UnimplementedSpeakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeakerServiceServer struct {
}

func (UnimplementedSpeakerServiceServer) AddSpeaker(context.Context, *AddSpeakerReq) (*SpeakerStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpeaker not implemented")
}
func (UnimplementedSpeakerServiceServer) AddChannel(context.Context, *AddChannelReqS) (*SpeakerStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannel not implemented")
}
func (UnimplementedSpeakerServiceServer) GetUserChannel(context.Context, *GetUserChannelReqS) (*GetUserChannelResS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChannel not implemented")
}
func (UnimplementedSpeakerServiceServer) DeleteChannel(context.Context, *DeleteChannelReqS) (*SpeakerStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedSpeakerServiceServer) DownOrUpVolume(context.Context, *DownOrUpVolumeReqS) (*DownOrUpVolumeResS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownOrUpVolume not implemented")
}
func (UnimplementedSpeakerServiceServer) PreviousAndNext(context.Context, *PreviousAndNextReqS) (*PreviousAndNextResS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviousAndNext not implemented")
}
func (UnimplementedSpeakerServiceServer) OnAndOffUserSpeaker(context.Context, *OnAndOffUserSpeakerReq) (*OnAndOffUserSpeakerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAndOffUserSpeaker not implemented")
}
func (UnimplementedSpeakerServiceServer) mustEmbedUnimplementedSpeakerServiceServer() {}

// UnsafeSpeakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakerServiceServer will
// result in compilation errors.
type UnsafeSpeakerServiceServer interface {
	mustEmbedUnimplementedSpeakerServiceServer()
}

func RegisterSpeakerServiceServer(s grpc.ServiceRegistrar, srv SpeakerServiceServer) {
	s.RegisterService(&SpeakerService_ServiceDesc, srv)
}

func _SpeakerService_AddSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpeakerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).AddSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_AddSpeaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).AddSpeaker(ctx, req.(*AddSpeakerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_AddChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelReqS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).AddChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_AddChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).AddChannel(ctx, req.(*AddChannelReqS))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_GetUserChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChannelReqS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).GetUserChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_GetUserChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).GetUserChannel(ctx, req.(*GetUserChannelReqS))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelReqS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).DeleteChannel(ctx, req.(*DeleteChannelReqS))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_DownOrUpVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownOrUpVolumeReqS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).DownOrUpVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_DownOrUpVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).DownOrUpVolume(ctx, req.(*DownOrUpVolumeReqS))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_PreviousAndNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviousAndNextReqS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).PreviousAndNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_PreviousAndNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).PreviousAndNext(ctx, req.(*PreviousAndNextReqS))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_OnAndOffUserSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnAndOffUserSpeakerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).OnAndOffUserSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_OnAndOffUserSpeaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).OnAndOffUserSpeaker(ctx, req.(*OnAndOffUserSpeakerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeakerService_ServiceDesc is the grpc.ServiceDesc for SpeakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SpeakerService",
	HandlerType: (*SpeakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSpeaker",
			Handler:    _SpeakerService_AddSpeaker_Handler,
		},
		{
			MethodName: "AddChannel",
			Handler:    _SpeakerService_AddChannel_Handler,
		},
		{
			MethodName: "GetUserChannel",
			Handler:    _SpeakerService_GetUserChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _SpeakerService_DeleteChannel_Handler,
		},
		{
			MethodName: "DownOrUpVolume",
			Handler:    _SpeakerService_DownOrUpVolume_Handler,
		},
		{
			MethodName: "PreviousAndNext",
			Handler:    _SpeakerService_PreviousAndNext_Handler,
		},
		{
			MethodName: "OnAndOffUserSpeaker",
			Handler:    _SpeakerService_OnAndOffUserSpeaker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/speaker/speaker.proto",
}
