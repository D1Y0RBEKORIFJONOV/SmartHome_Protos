syntax = "proto3";

option go_package  = "diyorbek.speaker.v1;speaker1";

service SpeakerService {
  rpc AddSpeaker(AddSpeakerReq) returns (SpeakerStatusMessage);
  rpc AddChannel(AddChannelReqS) returns (SpeakerStatusMessage);
  rpc GetUserChannel(GetUserChannelReqS) returns (GetUserChannelResS);
  rpc DeleteChannel(DeleteChannelReqS) returns (SpeakerStatusMessage);
  rpc DownOrUpVolume(DownOrUpVolumeReqS) returns (DownOrUpVolumeResS);
  rpc PreviousAndNext(PreviousAndNextReqS) returns (PreviousAndNextResS);
  rpc OnAndOffUserSpeaker(OnAndOffUserSpeakerReq) returns (OnAndOffUserSpeakerRes);
}

message OnAndOffUserSpeakerReq {
  string user_id = 1;
  bool on = 2;
  bool off = 3;
}
message OnAndOffUserSpeakerRes {
  string message = 1;
}

message ChannelS {
  string channel_name = 1;
  string channel_number = 2;
}

message GetUserChannelResS{
  repeated ChannelS channels = 1;
  int64 count = 2;
}

message AddSpeakerReq {
  string user_id = 1;
  string model_name = 2;
}

message SpeakerStatusMessage {
  bool successfully = 1;
}

message AddChannelReqS {
  string user_id = 1;
  string channel_name = 2;
}
message GetUserChannelReqS {
  string user_id = 1;
  string channel_name = 2;
}

message DeleteChannelReqS {
  string user_id = 1;
  string channel_name = 2;
}
message DownOrUpVolumeReqS {
  string user_id = 1;
  bool down = 2;
  bool up = 3;
}
message DownOrUpVolumeResS {
  int64 sound = 1;
}

message PreviousAndNextReqS {
  string user_id = 1;
  bool next = 2;
  bool back = 3;
}

message PreviousAndNextResS {
  ChannelS channel = 1;
}
